1 page
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_painter/image_painter.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:service/Job%20Card/imageDisplay07.dart';
import 'package:service/Job%20Card/jobCardImageEditor.dart';
import 'package:service/Job%20Card/jobCardIssueDetails8.dart';
import 'package:service/Job%20Card/jobCardVehicleDetail06.dart';

class jobCardVehicleDetails7 extends StatefulWidget {
  const jobCardVehicleDetails7({Key? key}) : super(key: key);

  @override
  _jobCardVehicleDetails7State createState() => _jobCardVehicleDetails7State();
}

class _jobCardVehicleDetails7State extends State<jobCardVehicleDetails7> {
  final ImagePicker _picker = ImagePicker();

  // Initialize with pre-loaded images (example paths)
  Map<String, String?> preloadedImages = {
    'Front': 'assets/car1.jpg',
    'Back': 'assets/car2.jpg',
    'Side 1': 'assets/car5.jpg',
    'Side 2': 'assets/car6.jpg',
    'Meter': null,
    'Engine': null,
    'Trunk': null,
    'Interior 1': null,
    'Interior 2': null,
    'Other Pic 1': null,
    'Other Pic 2': null,
  };

  Map<String, File?> selectedImages = {
    'Front': null,
    'Back': null,
    'Side 1': null,
    'Side 2': null,
    'Meter': null,
    'Engine': null,
    'Trunk': null,
    'Interior 1': null,
    'Interior 2': null,
    'Other Pic 1': null,
    'Other Pic 2': null,
  };

  Future<void> _showPicker(BuildContext context, String section) async {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext modalContext) {
        return SafeArea(
          child: Wrap(
            children: <Widget>[
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('Gallery'),
                onTap: () async {
                  Navigator.of(modalContext).pop();
                  final pickedFile =
                      await _picker.pickImage(source: ImageSource.gallery);
                  if (pickedFile != null) {
                    if (!mounted)
                      return; // Check if the widget is still mounted
                    final editedImage = await Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => ImageDisplayPage(
                          imageFile: File(pickedFile.path),
                          imageName: section, // Pass the image name here
                        ),
                      ),
                    );
                    if (editedImage != null) {
                      setState(() {
                        selectedImages[section] =
                            editedImage; // Update the selected image
                      });
                    }
                  } else {
                    print("No image selected from gallery.");
                  }
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_camera),
                title: const Text('Camera'),
                onTap: () async {
                  Navigator.of(modalContext).pop();
                  final pickedFile =
                      await _picker.pickImage(source: ImageSource.camera);
                  if (pickedFile != null) {
                    if (!mounted)
                      return; // Check if the widget is still mounted
                    final editedImage = await Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => ImageDisplayPage(
                          imageFile: File(pickedFile.path),
                          imageName: section, // Pass the image name here
                        ),
                      ),
                    );
                    if (editedImage != null) {
                      setState(() {
                        selectedImages[section] =
                            editedImage; // Update the selected image
                      });
                    }
                  } else {
                    print("No image captured from camera.");
                  }
                },
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
        canPop: false,
        onPopInvoked: (bool didPop) async {
          Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(
                  builder: (context) => const jobCardVehicleDetails06()),
              (route) => false);
        },
        child: Scaffold(
          appBar: AppBar(
            title: const Text(
              'Vehicle Details',
              style: TextStyle(
                fontSize: 22,
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
            iconTheme: const IconThemeData(color: Colors.white),
            centerTitle: true,
            elevation: 4,
            backgroundColor: Colors.red[600],
            leading: IconButton(
              icon: const Icon(Icons.arrow_back_outlined),
              onPressed: () {
                Navigator.pushAndRemoveUntil(
                    context,
                    MaterialPageRoute(
                        builder: (context) => const jobCardVehicleDetails06()),
                    (route) => false);
              },
            ),
          ),
          body: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Center(
                    child: Text(
                      'Job Card - Vehicle Details',
                      style: TextStyle(
                          fontSize: 20.0,
                          letterSpacing: 1.2,
                          fontWeight: FontWeight.bold,
                          color: Colors.red[600]),
                    ),
                  ),
                  const SizedBox(height: 16.0),
                  const Text(
                    'Add Photos',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 18.0,
                    ),
                  ),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Front'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Back'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Side 1'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Side 2'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Meter'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Engine'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Trunk'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Interior 1'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Interior 2'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Other Pic 1'),
                  const SizedBox(height: 16.0),
                  _buildPhotoSection('Other Pic 2'),
                  const SizedBox(height: 32),
                  Center(
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => jobCardIssueDetails8(),
                            ));
                      },
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(
                            vertical: 8, horizontal: 140),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(25),
                        ),
                        elevation: 6,
                        shadowColor: Colors.black26,
                        backgroundColor: Colors.red.shade600,
                        foregroundColor: Colors.white,
                      ),
                      child: const Text(
                        'Next',
                        style: TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ));
  }

  Widget _buildPhotoSection(String title) {
    print('Building photo section for $title');
    print('Selected images: $selectedImages');
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border.all(
          color: Colors.grey.shade300,
        ),
        borderRadius: BorderRadius.circular(12.0),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 2,
            blurRadius: 6,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          children: [
            Expanded(
              child: Container(
                height: 120.0,
                decoration: BoxDecoration(
                  color: Colors.grey.shade200,
                  borderRadius: BorderRadius.circular(12.0),
                  border: Border.all(
                    color: Colors.grey.shade300,
                  ),
                ),
                child: Stack(
                  children: [
                    // Showing the selected image
                    if (selectedImages[title] != null)
                      GestureDetector(
                        onTap: () {
                          _openImageEditor(
                              context, selectedImages[title]!, title);
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(12.0),
                          child: Image.file(
                            selectedImages[title]!,
                            fit: BoxFit.cover,
                            width: double.infinity,
                            height: double.infinity,
                          ),
                        ),
                      ),

                    // Showing the preloaded image if no selected image
                    if (selectedImages[title] == null &&
                        preloadedImages[title] != null)
                      GestureDetector(
                        onTap: () {
                          _openImageEditor(
                              context, preloadedImages[title]!, title);
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(12.0),
                          child: Image.asset(
                            preloadedImages[title]!,
                            fit: BoxFit.cover,
                            width: double.infinity,
                            height: double.infinity,
                          ),
                        ),
                      ),

                    // Placeholder for images if none is available
                    if (selectedImages[title] == null &&
                        preloadedImages[title] == null)
                      const Center(
                        child: Icon(
                          Icons.photo_camera_outlined,
                          size: 48.0,
                          color: Colors.grey,
                        ),
                      ),
                  ],
                ),
              ),
            ),
            const SizedBox(width: 16.0),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 16.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16.0),
                  ElevatedButton.icon(
                    onPressed: () {
                      _showPicker(context, title);
                    },
                    icon: const Icon(
                      Icons.camera_alt,
                      color: Colors.white,
                    ),
                    label: Text(
                      'Take Photo',
                      style: TextStyle(color: Colors.white, fontSize: 12),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red[600],
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12.0),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _openImageEditor(
      BuildContext context, dynamic imageFile, String section) async {
    File? editedImage; // Define the variable here
    if (imageFile is File) {
      editedImage = imageFile; // Assign the selected image directly
    } else {
      final bytes = await rootBundle.load(imageFile);
      final directory = await getApplicationDocumentsDirectory();
      final path = directory.path;
      final file = File('$path/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await file.writeAsBytes(bytes.buffer.asUint8List());
      editedImage = file; // Use the newly created file
      await file.delete(); // Optionally delete the file after use
    }

    // Check if editedImage is not null before navigating
    if (editedImage != null) {
      final returnedImage = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => ImageDisplayPage(
            imageFile: editedImage!, // Pass the edited image
            imageName: section, // Pass the section name
          ),
        ),
      );

      // Update the selected image if a new one is returned
      if (returnedImage != null) {
        setState(() {
          selectedImages[section] = returnedImage; // Update the selected image
        });
      }
    }
  }
}


2 page 
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:image_painter/image_painter.dart'; // Make sure to import this
import 'package:service/Job%20Card/jobCardImageEditor.dart';
import 'package:service/api/apiurl.dart';
import 'package:service/phone.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;

class ImageDisplayPage extends StatefulWidget {
  final File imageFile;
  final String imageName;

  const ImageDisplayPage(
      {Key? key, required this.imageFile, required this.imageName})
      : super(key: key);

  @override
  State<ImageDisplayPage> createState() => _ImageDisplayPageState();
}

class _ImageDisplayPageState extends State<ImageDisplayPage> {
  bool isButtonDisabled = false;
  int? jobCardId;

  void getJobCardId() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      jobCardId = prefs.getInt('job_card_id');
    });
  }

  @override
  void initState() {
    super.initState();
    getJobCardId();
  }

  Future<void> saveImage(File editedImage) async {
    if (!mounted) return;
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? password = prefs.getString('password');
    int? uid = prefs.getInt('uid');
    String? sessionToken = prefs.getString('session_token');
    String? dirName = prefs.getString('dir_name');
    String? dbName = prefs.getString('db_name');
    int? clientId = prefs.getInt('client_id');

    setState(() {
      isButtonDisabled = true;
    });

    Map<String, String> data = {
      'uid': uid.toString(),
      'password': password ?? '',
      'session_token': sessionToken ?? '',
      'photo_name': widget.imageName, // You can set a name for the image
      'image': editedImage.path,
      'dir_name': dirName ?? '',
      'db_name': dbName ?? '',
      'client_id': clientId.toString(),
      'job_card_id': jobCardId.toString()
    };

    if (kDebugMode) {
      print('Submit Document Data: ${json.encode(data)}');
    }

    try {
      if (editedImage != null) {
        var request = http.MultipartRequest(
          'POST',
          Uri.parse('${Apiurl.apiurl}job_card_add_photo.php'),
        );

        request.fields.addAll(data);
        request.files.add(
          await http.MultipartFile.fromPath('image', editedImage.path)
              .timeout(const Duration(seconds: 10)),
        );

        var streamedResponse = await request.send();
        var response = await http.Response.fromStream(streamedResponse);

        if (response.statusCode == 200) {
          Map<String, dynamic> responseString = jsonDecode(response.body);
          Map<String, dynamic> responseDetails =
              responseString['job_card_photo_upload'][0];

          int responseCodeReceived = responseDetails['response_code'];
          print(responseDetails);
          if (responseCodeReceived == 1) {
            if (kDebugMode) {
              print("Success Document Upload $responseCodeReceived");
            }
            setState(() {
              isButtonDisabled = false;
            });
            Fluttertoast.showToast(
              msg: "Image Uploaded Successfully...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red[600],
            );

            Navigator.pop(context, editedImage);
          } else if (responseCodeReceived == 2) {
            try {
              SharedPreferences prefs = await SharedPreferences.getInstance();
              await prefs.remove('isLoggedIn');

              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => const MyPhone()),
                (route) => false,
              );
            } catch (e) {
              print("Error while logging out: $e");
            }
            Fluttertoast.showToast(
              msg: "Session Expired...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red,
            );
          } else if (responseCodeReceived == 0) {
            if (kDebugMode) {
              print("Unsuccessful Image Upload $responseCodeReceived");
            }
            Fluttertoast.showToast(
              msg: "Upload Image Error...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red,
            );
          } else if (responseCodeReceived == 5) {
            print(
              "Account Storage Limit Exhausted. Please Upgrade Your Subscription Plan! $responseCodeReceived",
            );
          }
        } else {
          if (kDebugMode) {
            print('Error: ${response.statusCode}');
          }
        }
      } else {
        if (kDebugMode) {
          print('Error: Image path is null');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error: $e');
      }
    }

    setState(() {
      isButtonDisabled = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Image Preview',
          style: TextStyle(
            fontSize: 22,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: const IconThemeData(color: Colors.white),
        centerTitle: true,
        elevation: 4,
        backgroundColor: Colors.red[600],
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text('Image Name: ${widget.imageName}'),
          ClipRRect(
            borderRadius: BorderRadius.circular(16.0),
            child: Image.file(
              widget.imageFile,
              fit: BoxFit.fitHeight,
              width: double.infinity,
              height: 500.0,
            ),
          ),
          const SizedBox(height: 30.0),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Navigate to the ImageEditorPage
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ImageEditorPage(
                        selectedImage: widget.imageFile,
                        imagePath: widget.imageFile.path,
                        controller: ImagePainterController(),
                        imageName: widget.imageName,
                      ),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 30.0, vertical: 12.0),
                  backgroundColor: Colors.red[600],
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20.0),
                  ),
                  elevation: 8,
                ),
                child: const Text(
                  'Edit',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              ElevatedButton(
                onPressed: isButtonDisabled
                    ? null
                    : () async {
                        // Call the saveImage function and pass the image file to save it
                        await saveImage(widget.imageFile);
                      },
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 30.0, vertical: 12.0),
                  backgroundColor: Colors.green[600],
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20.0),
                  ),
                  elevation: 8,
                ),
                child: const Text(
                  'Save',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

3 page 

import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:image_painter/image_painter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:screenshot/screenshot.dart';
import 'package:service/Job%20Card/jobCardVehicleDetails7.dart';
import 'package:service/api/apiurl.dart';
import 'package:service/phone.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_image_compress/flutter_image_compress.dart';

class ImageEditorPage extends StatefulWidget {
  final File? selectedImage;
  final String imagePath;
  final String imageName;
  final ImagePainterController controller;

  const ImageEditorPage({
    Key? key,
    required this.selectedImage,
    required this.imagePath,
    required this.controller,
    required this.imageName,
  }) : super(key: key);

  @override
  _ImageEditorPageState createState() => _ImageEditorPageState();
}

class _ImageEditorPageState extends State<ImageEditorPage> {
  bool isButtonDisabled = false;
  int? jobCardId;

  void getJobCardId() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      jobCardId = prefs.getInt('job_card_id');
    });
  }

  @override
  void initState() {
    super.initState();
    getJobCardId();
  }

  Future<void> saveImage(File editedImage) async {
    if (!mounted) return;
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? password = prefs.getString('password');
    int? uid = prefs.getInt('uid');
    String? sessionToken = prefs.getString('session_token');
    String? dirName = prefs.getString('dir_name');
    String? dbName = prefs.getString('db_name');
    int? clientId = prefs.getInt('client_id');

    setState(() {
      isButtonDisabled = true;
    });

    // Prepare the data
    Map<String, String> data = {
      'uid': uid.toString(),
      'password': password ?? '',
      'session_token': sessionToken ?? '',
      'photo_name': widget.imageName,
      'dir_name': dirName ?? '',
      'db_name': dbName ?? '',
      'client_id': clientId.toString(),
      'job_card_id': jobCardId.toString(),
    };

    if (kDebugMode) {
      print('Submit Document Data: $data'); // Log the data being sent
    }

    try {
      if (editedImage != null) {
        // Compress the image to JPEG format
        final jpegBytes = await FlutterImageCompress.compressWithFile(
          editedImage.path,
          format: CompressFormat.jpeg,
          quality: 85, // Adjust quality as needed
        );

        // Create a new file for the JPEG image
        // Change this line to avoid double extension
        final jpegFile = File(editedImage.path.replaceAll('.jpg', '') + '.jpg');
        await jpegFile.writeAsBytes(jpegBytes!);

        var request = http.MultipartRequest(
          'POST',
          Uri.parse('${Apiurl.apiurl}job_card_add_photo.php'),
        );

        // Add fields directly to the request
        request.fields.addAll(data);

        // Add the image file to the request
        var file = await http.MultipartFile.fromPath('image', jpegFile.path);
        request.files.add(file);

        // Log the details of the request
        print('Request Fields: ${request.fields}');
        print(
            'Request Files: ${request.files.map((f) => f.filename).toList()}'); // Log the filenames

        // Send the request
        var streamedResponse = await request.send();
        var response = await http.Response.fromStream(streamedResponse);

        // Log the response
        print('Response Status Code: ${response.statusCode}');
        print('Response Body: ${response.body}');

        if (response.statusCode == 200) {
          Map<String, dynamic> responseString = jsonDecode(response.body);
          Map<String, dynamic> responseDetails =
              responseString['job_card_photo_upload'][0];

          int responseCodeReceived = responseDetails['response_code'];
          print(responseDetails);
          if (responseCodeReceived == 1) {
            if (kDebugMode) {
              print("Success Document Upload $responseCodeReceived");
            }
            Fluttertoast.showToast(
              msg: "Image Uploaded Successfully...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red[600],
            );

            Navigator.pop(context, jpegFile);
          } else if (responseCodeReceived == 2) {
            // Handle session expiration
            try {
              SharedPreferences prefs = await SharedPreferences.getInstance();
              await prefs.remove('isLoggedIn');

              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => const MyPhone()),
                (route) => false,
              );
            } catch (e) {
              print("Error while logging out: $e");
            }
            Fluttertoast.showToast(
              msg: "Session Expired...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red,
            );
          } else if (responseCodeReceived == 0) {
            if (kDebugMode) {
              print("Unsuccessful Image Upload $responseCodeReceived");
            }
            Fluttertoast.showToast(
              msg: "Upload Image Error...",
              toastLength: Toast.LENGTH_SHORT,
              gravity: ToastGravity.BOTTOM,
              backgroundColor: Colors.white,
              textColor: Colors.red,
            );
          } else if (responseCodeReceived == 5) {
            print(
              "Account Storage Limit Exhausted. Please Upgrade Your Subscription Plan! $response CodeReceived",
            );
          }
        } else {
          if (kDebugMode) {
            print('Error: ${response.statusCode}');
          }
        }
      } else {
        if (kDebugMode) {
          print('Error: Image path is null');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error: $e');
      }
    }

    setState(() {
      isButtonDisabled = false;
    });
  }

  final _screenshotController = ScreenshotController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Edit Image",
          style: TextStyle(
            fontSize: 22,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: const IconThemeData(color: Colors.white),
        centerTitle: true,
        elevation: 4,
        backgroundColor: Colors.red[600],
        actions: [
          // Wrap ElevatedButton in a Container for proper alignment
          Container(
            margin:
                const EdgeInsets.only(right: 16.0), // Add margin for spacing
            child: ElevatedButton(
              onPressed: () async {
                final image = await _screenshotController.capture();
                if (image == null) {
                  Fluttertoast.showToast(msg: "Failed to capture image.");
                  return;
                }

                final directory = await getApplicationDocumentsDirectory();
                final fileName =
                    DateTime.now().millisecondsSinceEpoch.toString();
                final file =
                    await File('${directory.path}/$fileName.jpg').create();
                await file.writeAsBytes((await image)?.toList() ?? []);

                // Now use file to send to the server
                saveImage(file);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red[600], // Background color
                padding:
                    const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20.0),
                ),
              ),
              child: const Text(
                'Save',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
      body: Screenshot(
        controller: _screenshotController,
        child: Center(
          child: ImagePainter.file(
            widget.selectedImage!,
            controller: widget.controller,
            scalable: true,
            controlsAtTop: false,
          ),
        ),
      ),
    );
  }
}

